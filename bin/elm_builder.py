def generate_elm_file(path, palettes):
    functions = generate_elm_functions(palettes)
    all_function_names = ", ".join([x[1] for x in functions])

    lines = [
        "module PaletteList exposing",
        "    ( paletteList",
        "    , " + all_function_names,
        "    )",
        "",
        "{-| The comprehensive list of Lospec palettes",
        "This file is automatically generated weekly.",
        "",
        "@docs paletteList",
        "",
        "The list of all palettes follows. There's a lot of them!",
        "If you need a specific one, it's probably easier to check the official list",
        "<https://lospec.com/palette-list>",
        "",
        "@docs " + all_function_names,
        "",
        "-}",
        "",
        "import Color exposing (rgb255)",
        "import Dict exposing (Dict)",
        "import Palette exposing (Palette, createPalette)",
        "",
        "",
    ]

    for function in functions:
        lines = lines + function[2]

    lines = lines + [
        "{-| All the Lospec color palettes, in a useful Dict format.",
        "",
        "If you only need to use one or two specific palettes, you should use the function names instead to keep asset sizes small",
        "",
        "Palettes.elm contains some functions that can help search through this structure",
        "",
        "-}",
        "paletteList : Dict String Palette",
        "paletteList =",
        "    Dict.fromList",
        "        [ " + generate_elm_dict(functions),
        "        ]",
    ]

    with open(path, "w", encoding="utf-8") as f:
        f.writelines([line + "\n" for line in lines])


def generate_elm_dict(functions):
    return "\n        , ".join([generate_elm_dict_row(x) for x in functions])


def generate_elm_dict_row(funcdata):
    key = funcdata[0]
    value = funcdata[1]
    return f'( "{key}", {value} )'


def generate_elm_functions(palettes):
    return [
        generate_elm_function(slug, palette)
        for slug, palette in sorted(palettes.items())
    ]


def generate_elm_function(slug, data):
    function_name = to_camel_case(slug)
    if function_name[0].isdigit():
        function_name = "p" + function_name  # can we do better?

    # Make a decent description thing for the docstring
    title = tidy_string(data.get("title"))
    author = data.get("authorName")
    description = "{-| " + title
    if author:
        description = description + " by " + author

    function_content = generate_elm_palette(slug, data)
    lines = [
        tidy_description_string(description),
        "<" + data.get("url") + ">",
        "-}",
        f"{function_name} : Palette.Palette",
        f"{function_name} =",
        f"    {function_content}",
        "",
        "",
    ]
    return (slug, function_name, lines)


def generate_elm_palette(slug, data):
    colors_list = (
        f"[ {', '.join([generate_elm_color(color) for color in data.get('colors')])} ]"
    )
    tags_string = ", ".join(generate_elm_tag(tag) for tag in data.get("tags"))
    tags_list = f"[ {tags_string} ]" if tags_string else "[]"
    author = data.get("authorName")
    maybe_author = f'(Just "{author}")' if author else "Nothing"
    title = tidy_string(data.get("title"))
    url = data.get("url")

    return f'createPalette "{title}" {colors_list} {tags_list} {maybe_author} "{url}"'


def tidy_string(string):
    return (
        string.replace("\r\n", "")
        .replace("\n", "")
        .replace('"', "")
        .replace("Â ", "\\u{00A0}")
        .replace("	", "\\t")
    )


def tidy_description_string(string):
    return (
        string.replace("  ", " ")
        .replace("_", "\_")
        .replace("*", "")
        .replace("[", "")
        .replace("]", "")
        .rstrip()
    )


def to_camel_case(string):
    components = string.replace("_", "-").lstrip("-").split("-")
    return components[0] + "".join(x.title() for x in components[1:])


def hex_to_rgb(string):
    return tuple(int(string.lstrip("#")[i : i + 2], 16) for i in (0, 2, 4))


def generate_elm_color(string):
    r, g, b = hex_to_rgb(string)
    return f"rgb255 {r} {g} {b}"


def generate_elm_tag(string):
    return f'"{string}"'
